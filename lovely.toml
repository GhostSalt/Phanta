[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''(G.GAME.used_vouchers["v_retcon"] or G.GAME.used_vouchers["v_directors_cut"]) and'''
position = 'at'
payload = '''(G.GAME.used_vouchers["v_retcon"] or G.GAME.used_vouchers["v_directors_cut"] or #SMODS.find_card('j_phanta_clapperboard') > 0) and'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''(G.GAME.used_vouchers["v_retcon"] or'''
position = 'after'
payload = '''#SMODS.find_card('j_phanta_clapperboard') > 0 or'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''if v:is_suit(kk) then mod_suit_counts[kk] = mod_suit_counts[kk] + 1 end'''
position = 'at'
payload = '''G.phanta_lie_about_unknowns = true; if v:is_suit(kk) then mod_suit_counts[kk] = mod_suit_counts[kk] + 1 end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''mod_suit_tallies['Spades'] = (mod_suit_tallies['Spades'] or 0) + (v:is_suit('Spades') and 1 or 0)'''
position = 'at'
payload = '''G.phanta_lie_about_unknowns = true; mod_suit_tallies['Spades'] = (mod_suit_tallies['Spades'] or 0) + (v:is_suit('Spades') and 1 or 0)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''mod_suit_tallies['Hearts'] = (mod_suit_tallies['Hearts'] or 0) + (v:is_suit('Hearts') and 1 or 0)'''
position = 'at'
payload = '''G.phanta_lie_about_unknowns = true; mod_suit_tallies['Hearts'] = (mod_suit_tallies['Hearts'] or 0) + (v:is_suit('Hearts') and 1 or 0)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''mod_suit_tallies['Clubs'] = (mod_suit_tallies['Clubs'] or 0) + (v:is_suit('Clubs') and 1 or 0)'''
position = 'at'
payload = '''G.phanta_lie_about_unknowns = true; mod_suit_tallies['Clubs'] = (mod_suit_tallies['Clubs'] or 0) + (v:is_suit('Clubs') and 1 or 0)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''mod_suit_tallies['Diamonds'] = (mod_suit_tallies['Diamonds'] or 0) + (v:is_suit('Diamonds') and 1 or 0)'''
position = 'at'
payload = '''G.phanta_lie_about_unknowns = true; mod_suit_tallies['Diamonds'] = (mod_suit_tallies['Diamonds'] or 0) + (v:is_suit('Diamonds') and 1 or 0)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = '''if v.facing == 'back' then'''
position = 'at'
payload = '''G.phanta_lie_about_unknowns = true; if v.facing == 'back' or v:is_suit("phanta_unknown") then'''
match_indent = true

# [[patches]]
# [patches.pattern]
# target = 'functions/state_events.lua'
# pattern = '''if G.GAME.dollars >= 5 and not G.GAME.modifiers.no_interest then'''
# position = 'before'
# payload = '''local moneybags = next(SMODS.find_card("j_phanta_mrbigmoneybags"))'''
# match_indent = true
# 
# [[patches]]
# [patches.pattern]
# target = 'functions/state_events.lua'
# pattern = '''if G.GAME.dollars >= 5 and not G.GAME.modifiers.no_interest then'''
# position = 'at'
# payload = '''if (G.GAME.dollars >= 5 or moneybags) and not G.GAME.modifiers.no_interest then'''
# match_indent = true
# 
# [[patches]]
# [patches.pattern]
# target = 'functions/state_events.lua'
# pattern = '''add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})'''
# position = 'at'
# payload = '''add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*(moneybags and G.GAME.interest_cap/5 or math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5))})'''
# match_indent = true
# 
# [[patches]]
# [patches.pattern]
# target = 'functions/state_events.lua'
# pattern = '''if G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5) == G.GAME.interest_amount*G.GAME.interest_cap/5 then'''
# position = 'at'
# payload = '''if moneybags or G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5) == G.GAME.interest_amount*G.GAME.interest_cap/5 then'''
# match_indent = true
# 
# [[patches]]
# [patches.pattern]
# target = 'functions/state_events.lua'
# pattern = '''dollars = dollars + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)'''
# position = 'at'
# payload = '''dollars = dollars + G.GAME.interest_amount*(moneybags and G.GAME.interest_cap/5 or math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5))'''
# match_indent = true



[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''if args.key == '[' or args.key == ']' then return end'''
position = 'at'
payload = '''if (args.key == '[' or args.key == ']') and not hook.config.ref_table.extended_corpus then return end'''
match_indent = true

# why does 0 crash the game why does 0 crash the game why does
# [[patches]]
# [patches.pattern]
# target = 'functions/button_callbacks.lua'
# pattern = '''if args.key == '0' then args.key = 'o' end'''
# position = 'at'
# payload = '''if args.key == '0' and not hook.config.ref_table.extended_corpus then args.key = 'o' end'''
# match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''local corpus = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'..(hook.config.ref_table.extended_corpus and " 0!$&()<>?:{}+-=,.[]_" or '')'''
position = 'at'
payload = '''local corpus = '123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'..(hook.config.ref_table.extended_corpus and " 0!$&()<>?:{}+-=,.[]_'" or '')'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''{n=G.UIT.T, config={text = localize{type = 'variable', key = 'ante_x_voucher', vars = {G.GAME.round_resets.ante}}, scale = 0.45, colour = G.C.L_BLACK, vert = true}},'''
position = 'at'
payload = '''{n=G.UIT.T, config={text = next(SMODS.find_card('j_phanta_theblackraven')) and localize('phanta_theblackraven_blackmarket') or localize{type = 'variable', key = 'ante_x_voucher', vars = {G.GAME.round_resets.ante}}, scale = 0.45, colour = G.C.L_BLACK, vert = true}},'''
match_indent = true



[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
love.graphics.translate(
    moveable.VT.x+moveable.VT.w/2 + (offset and offset.x or 0) + ((moveable.layered_parallax and moveable.layered_parallax.x) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.x)) or 0),
    moveable.VT.y+moveable.VT.h/2 + (offset and offset.y or 0) + ((moveable.layered_parallax and moveable.layered_parallax.y) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.y)) or 0))
'''
position = "at"
payload = '''
love.graphics.translate(moveable.VT.x+moveable.VT.w/2, moveable.VT.y+moveable.VT.h/2)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/misc_functions.lua"
pattern = '''
love.graphics.scale(moveable.VT.scale*scale)
'''
position = "after"
payload = '''
love.graphics.translate(
    (offset and offset.x or 0) + ((moveable.layered_parallax and moveable.layered_parallax.x) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.x)) or 0),
    (offset and offset.y or 0) + ((moveable.layered_parallax and moveable.layered_parallax.y) or ((moveable.parent and moveable.parent.layered_parallax and moveable.parent.layered_parallax.y)) or 0))
'''
match_indent = true







[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''if add and not G.GAME.banned_keys[v.key] then'''
position = 'before'
payload = '''if G.GAME.modifiers.phanta_only then
    if not v.mod and v.set == "Joker" then add = false end
    if (v.mod and v.mod.id ~= 'GSPhanta') then
        local valid = false
        for _, vv in ipairs(Phanta.phanta_only_inclusion or {}) do
            if vv == v.key then valid = true end
        end
        if not valid then add = false end
    end 
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = '''local min_use = 100'''
position = 'before'
payload = '''if G.GAME.modifiers.phanta_only then
    for k, v in pairs(eligible_bosses) do
        if eligible_bosses[k] and G.P_BLINDS[k].mod and G.P_BLINDS[k].mod.id ~= 'GSPhanta' then
            eligible_bosses[k] = nil
        end
    end
end
'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''if G.GAME.modifiers.no_blind_reward and G.GAME.modifiers.no_blind_reward[self:get_type()] then self.dollars = 0 end'''
position = 'before'
payload = '''if G.GAME.modifiers.small_blind_reward then self.dollars = 3 end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''{n=G.UIT.T, config={text = string.rep(localize("$"), blind_choice.config.dollars)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}'''
position = 'at'
payload = '''{n=G.UIT.T, config={text = string.rep(localize("$"), blind_choice.dollars)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
pattern = '''
local blind_choice = {
    config = G.P_BLINDS[G.GAME.round_resets.blind_choices[type]],
  }'''
position = 'after'
payload = '''
blind_choice.dollars = blind_choice.config.dollars
if G.GAME.modifiers.small_blind_reward then blind_choice.dollars = 3 end
'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.config.center.eternal_compat and not self.ability.perishable then'''
position = 'at'
payload = '''if (self.config.center.eternal_compat or (self.ability and self.ability.consumeable and G.GAME.modifiers.enable_eternal_consumables)) and not self.ability.perishable then'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''if self.config.center.perishable_compat and not self.ability.eternal then'''
position = 'at'
payload = '''if (self.config.center.perishable_compat or (self.ability and self.ability.consumeable and G.GAME.modifiers.enable_perishable_consumables)) and not self.ability.eternal then'''
match_indent = true



[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''for i = 1, G.GAME.shop.joker_max - #G.shop_jokers.cards do'''
position = 'at'
payload = '''for i = 1, math.max(G.GAME.shop.joker_max - ((G.GAME.current_shop_rerolls or 0) <= 0 and G.GAME.modifiers.fewer_shop_slots_pre_reroll or 0), 0) do'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''for i = 1, G.GAME.shop.joker_max - #G.shop_jokers.cards do'''
position = 'at'
payload = '''for i = 1, math.max(G.GAME.shop.joker_max - ((G.GAME.current_shop_rerolls or 0) <= 0 and G.GAME.modifiers.fewer_shop_slots_pre_reroll or 0), 0) do'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = '''G.CONTROLLER.locks.shop_reroll = true'''
position = 'before'
payload = '''G.GAME.current_shop_rerolls = (G.GAME.current_shop_rerolls or 0) + 1'''
match_indent = true